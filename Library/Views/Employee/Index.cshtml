@using Library.ViewModels;
@model IEnumerable<EmployeeRolesViewModel>

@{
    ViewData["Title"] = "Employees";
}

<label for="roleFilter" style="color: white">Filter by Role:</label>
<select id="roleFilter" onchange="filterByRole()">
    <option value="All">All</option>
    @foreach (var role in Enum.GetNames(typeof(Library.Model.Enums.Role)))
    {
        <option value="@role">@role</option>
    }
</select>
<div class="employees-container">
  
    <br /><br />
    <table class="table table-striped table-hover">
        <thead class="thead-light">
            <tr>
                <th>Name and Surname</th>
                <th>Email</th>
                <th>Phone Number</th>
                <th>Roles</th>
            </tr>
        </thead>
        <tbody id="employeeTable">
            @foreach (var employee in Model)
            {
                <tr class="clickable-row" onclick="window.location='@Url.Action("Details", "Employee", new { id = employee.Employee.Id })';">
                    <td>@($"{employee.Employee.Name} {employee.Employee.Surname}")</td>
                    <td>@employee.Employee.Email</td>
                    <td>@employee.Employee.PhoneNumber</td>
                    <td>
                        @foreach (var role in employee.Roles)
                        {
                            <span class="role-tag0">@role</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    function filterByRole() {
        const selectedRole = document.getElementById("roleFilter").value;
        const rows = document.querySelectorAll("#employeeTable tr");

        rows.forEach(row => {
            const roles = Array.from(row.querySelectorAll(".role-tag0")).map(roleTag => roleTag.textContent);
            if (selectedRole === "All" || roles.includes(selectedRole)) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        });
    }
</script>